{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","$","document","ready","on","e","searchText","axios","get","then","response","console","log","movies","data","Search","output","each","index","movie","Poster","Title","imdbID","html","catch","err","getMovies","val","preventDefault","App","className","class","src","logo","alt","id","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,iOCkC3CC,IAAEC,UAAUC,OAAM,WAChBF,IAAE,eAAeG,GAAG,UAAU,SAACC,IAOjC,SAAmBC,GACjBC,IAAMC,IAAI,6BAA6BF,EAAW,oBAC/CG,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ,IAAIG,EAASH,EAASI,KAAKC,OACvBC,EAAS,GACbf,IAAEgB,KAAKJ,GAAQ,SAACK,EAAOC,GACrBH,GAAM,kHAGYG,EAAMC,OAHlB,iCAIMD,EAAME,MAJZ,4DAK6BF,EAAMG,OALnC,8GAWRrB,IAAE,WAAWsB,KAAKP,MAEnBQ,OAAM,SAACC,GACNd,QAAQC,IAAIa,MA1BdC,CADiBzB,IAAE,eAAe0B,OAElCtB,EAAEuB,uBAiFSC,MA/Gf,WACE,OACE,yBAAKC,UAAU,OACZ,yBAAKC,MAAM,aACZ,4BAAQD,UAAU,cAChB,8CACA,oEACA,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,UAGzC,yBAAKH,MAAM,aACT,oDACA,0BAAMI,GAAG,cACT,2BAAOL,UAAU,0CAA0CM,KAAK,OAAQD,GAAG,aAAaE,YAAY,wBAItG,6BACA,yBAAKP,UAAU,aACf,yBAAKK,GAAG,SAASL,UAAU,WCffQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAc7C,MACrBM,MAAK,SAAAwC,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.e3a2c947.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport $ from 'jquery';\nimport axios from 'axios';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <div class=\"container\">\n      <header className=\"App-header\">\n        <h2>Movie List App</h2>\n        <h5>React JS Application using OMDB API </h5> \n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header> \n     \n        <div class=\"jumbotron\">  \n          <h3>Search for any Movie</h3>          \n          <form id=\"searchForm\">\n          <input className=\"form-control glyphicon glyphicon-search\" type=\"text\"  id=\"searchText\" placeholder=\"Search Movies...\"/> \n          </form>   \n        </div>\n      </div>\n        <br/>\n        <div className=\"container\">\n        <div id=\"movies\" className=\"row\"></div>\n        </div> \n      \n    </div>\n    \n  );\n}\n$(document).ready(() => {\n  $('#searchForm').on('submit', (e) => {\n    let searchText = $('#searchText').val();\n    getMovies(searchText);\n    e.preventDefault();\n  });\n});\n\nfunction getMovies(searchText){\n  axios.get('https://www.omdbapi.com?s='+searchText+'&apikey=31ac049d')\n    .then((response) => {\n      console.log(response);\n      let movies = response.data.Search;\n      let output = '';\n      $.each(movies, (index, movie) => {\n        output += `\n          <div class=\"col-md-3\">\n            <div class=\"well text-center\">\n              <img src=\"${movie.Poster}\">\n              <h5>${movie.Title}</h5>\n              <a onclick=\"movieSelected('${movie.imdbID}')\" class=\"btn btn-primary\" href=\"#\">Movie Details</a>\n            </div>\n          </div>\n        `;\n      });\n\n      $('#movies').html(output);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n}\n/// Selected Movie  ///\nfunction movieSelected(id){\n  sessionStorage.setItem('movieId', id);\n  window.location = 'movie.html';\n  return false;\n}\n\nfunction getMovie(){\n  let movieId = sessionStorage.getItem('movieId');\n\n  axios.get('https://www.omdbapi.com?i='+movieId+'&apikey=31ac049d')\n    .then((response) => {\n      console.log(response);\n      let movie = response.data;\n\n      let output =`\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <img src=\"${movie.Poster}\" class=\"thumbnail\">\n          </div>\n          <div class=\"col-md-8\">\n            <h2>${movie.Title}</h2>\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\"><strong>Genre:</strong> ${movie.Genre}</li>\n              <li class=\"list-group-item\"><strong>Released:</strong> ${movie.Released}</li>\n              <li class=\"list-group-item\"><strong>Rated:</strong> ${movie.Rated}</li>\n              <li class=\"list-group-item\"><strong>IMDB Rating:</strong> ${movie.imdbRating}</li>\n              <li class=\"list-group-item\"><strong>Director:</strong> ${movie.Director}</li>\n              <li class=\"list-group-item\"><strong>Writer:</strong> ${movie.Writer}</li>\n              <li class=\"list-group-item\"><strong>Actors:</strong> ${movie.Actors}</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"well\">\n            <h3>Plot</h3>\n            ${movie.Plot}\n            <hr>\n            <a href=\"http://imdb.com/title/${movie.imdbID}\" target=\"_blank\" class=\"btn btn-primary\">View IMDB</a>\n            <a href=\"index.html\" class=\"btn btn-default\">Go Back To Search</a>\n          </div>\n        </div>\n      `;\n\n      $('#movie').html(output);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}